
#include <unistd.h>
#include <dirent.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>

#include <dirent.h>
#include <fcntl.h>
#include <sys/time.h>
#include <time.h>

#include <inttypes.h>
#include <math.h>
#include <limits.h>
#include <signal.h>
#include <stdint.h>

#include <SDL/SDL.h>
#include <SDL/SDL_thread.h>

#include <assert.h>

static int fs_screen_width;
static int fs_screen_height;
static int screen_width;
static int screen_height;

static 	int    deb_ch_h=13;
static 	int    deb_ch_w=6;
static 	int    deb_ch_m=30;
static 	int    deb_ch_d=0;

static char      deb_ascii_bmp[128][13][6][3];
static char      deb_chs_bmp2[6][128][13][12][3];
static char      deb_chs_bmp[128][128][13][12][3];

static 	char 	 deb_tableline[3000];

static  int       deb_fh;
static 	char     *deb_str;

static 	char      deb_scrn_str[2001];
static 	char      deb_scrn_str2[8001];

static SDL_Surface *screen;

static int deb_fh_train_i;
static int deb_fh_train_l;
static int deb_train_page;
static int deb_train_seri;

static unsigned char deb_train_image[10][28][28];
static unsigned char deb_train_label[10];

static int deb_fh_test_i;
static int deb_fh_test_l;
static int deb_test_page;
static int deb_test_seri;

static unsigned char deb_test_image[10][28][28];
static unsigned char deb_test_label[10];

static int deb_select=0;
static int deb_select_ind=0;

static void do_exit(void);
static int deb_disp_bar(void);
static int deb_load_train(void);
static int deb_load_test(void);
static int deb_disp_train(void);
static int deb_disp_test(void);
static int deb_echo_str4screenstring(int xx,int yy,char *str,int len);

/* polls for possible required screen refresh at least this often, should be less than 1/fps */
#define REFRESH_RATE 0.01

static int video_open(void)
{
    int flags = SDL_HWSURFACE | SDL_ASYNCBLIT | SDL_HWACCEL;
    int w,h;
    int tmp_n1,tmp_n2;

    flags |= SDL_RESIZABLE;

    w = 650;	//daipozhi modified 
    h = 700;	//daipozhi modified 

    tmp_n1 = deb_ch_w*2*(w /(deb_ch_w*2)) ;
    tmp_n2 = deb_ch_h*1*(h /(deb_ch_h*1))+7 ;

    w=tmp_n1;
    h=tmp_n2;

    screen_width =w;
    screen_height=h;

    screen = SDL_SetVideoMode(w, h, 0, flags);
    if (!screen) {
        printf("SDL: could not set video mode - exiting\n");
        do_exit();
    }

    return 0;
}

static inline void fill_rectangle(SDL_Surface *screen,
                                  int x, int y, int w, int h, int color, int update)
{
    SDL_Rect rect;
    rect.x = x;
    rect.y = y;
    rect.w = w;
    rect.h = h;
    SDL_FillRect(screen, &rect, color);
    if (update && w > 0 && h > 0)
        SDL_UpdateRect(screen, x, y, w, h);
}

int av_usleep(int usec)
{
    usleep(usec);
    //sleep(1);
    return 0;
}

static void refresh_loop_wait_event(SDL_Event *event) 
{
    double remaining_time = 0.0;
    SDL_PumpEvents();
    while (!SDL_PeepEvents(event, 1, SDL_GETEVENT, /*SDL_FIRSTEVENT, SDL_LASTEVENT*/  SDL_ALLEVENTS )) 
    {   
        if (remaining_time > 0.0)
            av_usleep(remaining_time * 1000000.0);
        remaining_time = REFRESH_RATE;

        SDL_PumpEvents();
    }
}

static void do_exit(void)
{
    SDL_Quit();
    exit(0);
}

/* handle an event sent by the GUI */
static void event_loop(void)
{
    SDL_Event event;
    double incr, pos, frac;
    int  xx,yy;
    int  i,j,k,l;
    char str[300];

    for (;;) 
    {
        double x;
        refresh_loop_wait_event(&event);
        switch (event.type) 
        {
          case SDL_MOUSEBUTTONDOWN:

		xx=event.button.x;
		yy=event.button.y;

                if ((xx>=320)&&(xx<320+66)&&(yy>=1)&&(yy<1+13))  // train page up
		{
			if (deb_select==1) deb_select=0;

			if (deb_train_page>0)
			{
				deb_train_page--;

				deb_load_train();

				deb_disp_train();
				deb_disp_test();
				deb_disp_bar();

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

                if ((xx>=320)&&(xx<320+66)&&(yy>=1+20)&&(yy<1+20+13)) //train page down
		{
			if  (deb_select==1) deb_select=0;

			if (deb_train_page<6000-1)
			{
				deb_train_page++;

				deb_load_train();

				deb_disp_train();
				deb_disp_test();
				deb_disp_bar();

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

                if ((xx>=320)&&(xx<320+66)&&(yy>=1+90)&&(yy<1+13+90))  // test page up
		{
			if  (deb_select==2) deb_select=0;

			if (deb_test_page>0)
			{
				deb_test_page--;

				deb_load_test();

				deb_disp_train();
				deb_disp_test();
				deb_disp_bar();

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

                if ((xx>=320)&&(xx<320+66)&&(yy>=1+20+90)&&(yy<1+20+13+90)) //test page down
		{
			if  (deb_select==2) deb_select=0;

			if (deb_test_page<500-1)
			{
				deb_test_page++;

				deb_load_test();

				deb_disp_train();
				deb_disp_test();
				deb_disp_bar();

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

		for (i=0;i<10;i++) // select traim image
		{
			j=1+i*30;
			k=21+30;
			if ((xx>=j)&&(xx<j+4*6)&&(yy>=k)&&(yy<k+13))
			{
				deb_select=1;
				deb_select_ind=i;

				for (l=0;l<10;l++)
				{
					if (l==i)
					{
					        str[0]=deb_train_label[l];
					        str[1]=0;
					        strcat(str,"(*)");

						deb_echo_str4screenstring(1+l*30,k,str,4);
					}
					else
					{
					        str[0]=deb_train_label[l];
					        str[1]=0;
					        strcat(str,"( )");

						deb_echo_str4screenstring(1+l*30,k,str,4);
					}
				}

				for (l=0;l<10;l++)
				{
					str[0]=deb_test_label[l];
					str[1]=0;
					strcat(str,"( )");

					deb_echo_str4screenstring(1+l*30,k+90,str,4);
				}

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

		for (i=0;i<10;i++)  //select test image
		{
			j=1+i*30;
			k=21+30+90;
			if ((xx>=j)&&(xx<j+4*6)&&(yy>=k)&&(yy<k+13))
			{
				deb_select=2;
				deb_select_ind=i;

				for (l=0;l<10;l++)
				{
					if (l==i)
					{
					        str[0]=deb_test_label[l];
					        str[1]=0;
					        strcat(str,"(*)");

						deb_echo_str4screenstring(1+l*30,k,str,4);
					}
					else
					{
					        str[0]=deb_test_label[l];
					        str[1]=0;
					        strcat(str,"( )");

						deb_echo_str4screenstring(1+l*30,k,str,4);
					}
				}

				for (l=0;l<10;l++)
				{
					str[0]=deb_train_label[l];
					str[1]=0;
					strcat(str,"( )");

					deb_echo_str4screenstring(1+l*30,k-90,str,4);
				}

				SDL_UpdateRect(screen,0,0, screen_width,screen_height);
			}
		}

            break;
          case SDL_VIDEOEXPOSE:
            break;
          case SDL_VIDEORESIZE:
            break;
          case SDL_QUIT:
            do_exit();
            break;
          default:
            break;
        }
    }
}

static int deb_load_font(void)
{
	int  n1,n2;    
	int  l1,l2,l3,l4;
	char c1,c2,c3;
	char str[300];

	deb_fh=open("./ascii_bmp/ascii_bmp.data",O_RDONLY,S_IREAD);
    	if (deb_fh>=0)
	{
		deb_str=(char *)deb_ascii_bmp;
		read(deb_fh,deb_str,128*13*6*3);
		close(deb_fh);
	}

	n1=0;
	n2=129;

	while (n1<=120)
	{

		snprintf(str,300,"./ascii_bmp/chs_bmp%3d.data",n2);

		deb_fh=open(str,O_RDONLY,S_IREAD);
    		if (deb_fh>=0)
		{
			deb_str=(char *)deb_chs_bmp2;
			read(deb_fh,deb_str,6*128*13*12*3);
			close(deb_fh);
		}

		for (l1=0;l1<6;l1++)
			for (l2=0;l2<128;l2++)
				for (l3=0;l3<13;l3++)
					for (l4=0;l4<12;l4++)
					{
						c1=deb_chs_bmp2[l1][l2][l3][l4][0];
						c2=deb_chs_bmp2[l1][l2][l3][l4][1];
						c3=deb_chs_bmp2[l1][l2][l3][l4][2];

						if ((n1+l1<0)||(n1+l1>=128)) continue;    //***notice

						deb_chs_bmp[n1+l1][l2][l3][l4][0]=c1;
						deb_chs_bmp[n1+l1][l2][l3][l4][1]=c2;
						deb_chs_bmp[n1+l1][l2][l3][l4][2]=c3;
					}

		n1=n1+6;
		n2=n2+6;

	}


	// daipozhi modified
	deb_fh=open("./ascii_bmp/tableline.txt",O_RDONLY,S_IREAD);
    	if (deb_fh>=0)
	{
		read(deb_fh,deb_tableline,30);
		close(deb_fh);
	}

	return(0);
}

static int deb_echo_char4seekbar(int x,int y,int ec)
{
	int l1/*,l2*/;
	//int i1,i2,i3;
	int bgcolor;

        if (ec=='-')
        {

		bgcolor = SDL_MapRGB(screen->format, 255, 255, 255);

		fill_rectangle(screen,
					x, 
					y+7,
					1, 
					1,
					bgcolor,0);
	}

	return(0);
}

static int deb_echo_str4seekbar(int yy,char *str)
{
	int i,j,k;
	int x,y;

	x=0;
	y=yy;

	i=(int)strlen(str);

	if (i<0) return(0);

	for (j=0;j<i;j++)
	{
		k=str[j];

		if ((k<32)||(k>=128)) continue;

		deb_echo_char4seekbar(x,y,k);
		
		x=x+1;
	}

	return(0);
}

static int deb_echo_char4en(int x,int y,int ec)
{
	int l1,l2;
	int i1,i2,i3;
	int bgcolor;
	int updown=0;

	if ((ec<0)||(ec>=128)) return(0);

	if (ec=='^')
	{
		ec='V';
		updown=1;
	}

	for (l1=0;l1<13;l1++)
	{
		for (l2=0;l2<6;l2++)
		{
			i1=deb_ascii_bmp[ec][l1][l2][0];
			i2=deb_ascii_bmp[ec][l1][l2][1];
			i3=deb_ascii_bmp[ec][l1][l2][2];

			bgcolor = SDL_MapRGB(screen->format, i1, i2, i3);//daipozhi modi

			if (updown==0)
			{
			    fill_rectangle(screen,
						   x+l2, y+13-l1,
					       1, 1,
						   bgcolor,0);
			}
			else
			{
			    fill_rectangle(screen,
						   x+l2, y+1 +l1,
					       1, 1,
						   bgcolor,0);
			}
		}
	}

	return(0);
}

static int deb_echo_char4enblack(int x,int y,int ec)
{
	int l1,l2;
	int i1,i2,i3;
	int bgcolor;
	int updown=0;
	unsigned char uc1,uc2,uc3;

	if ((ec<0)||(ec>=128)) return(0);

	if (ec=='^')
	{
		ec='V';
		updown=1;
	}

	for (l1=0;l1<13;l1++)
	{
		for (l2=0;l2<6;l2++)
		{
			uc1=deb_ascii_bmp[ec][l1][l2][0];
			uc2=deb_ascii_bmp[ec][l1][l2][1];
			uc3=deb_ascii_bmp[ec][l1][l2][2];

			i1=255-uc1;
			i2=255-uc2;
			i3=255-uc3;

			bgcolor = SDL_MapRGB(screen->format, i1, i2, i3);//daipozhi modi

			if (updown==0)
			{
			    fill_rectangle(screen,
						   x+l2, y+13-l1,
					       1, 1,
						   bgcolor,0);
			}
			else
			{
			    fill_rectangle(screen,
						   x+l2, y+1 +l1,
					       1, 1,
						   bgcolor,0);
			}
		}
	}

	return(0);
}

static int deb_echo_char4chs(int x,int y,int k,int l)
{
	int l1,l2;
	int i1,i2,i3;
	int bgcolor;

	if ((k<0)||(k>=126)) return(0);
	if ((l<0)||(l>127)) return(0);

	for (l1=0;l1<13;l1++)
	{
		for (l2=0;l2<12;l2++)
		{
			i1=deb_chs_bmp[k][l][l1][l2][0];
			i2=deb_chs_bmp[k][l][l1][l2][1];
			i3=deb_chs_bmp[k][l][l1][l2][2];

			bgcolor = SDL_MapRGB(screen->format, i1, i2, i3);//daipozhi modi

		    fill_rectangle(screen,
						   x+l2, y+13-l1,
					       1, 1,
						   bgcolor,0);
		}
	}

	return(0);
}

static int deb_echo_char4chsblack(int x,int y,int k,int l)
{
	int l1,l2;
	int i1,i2,i3;
	int bgcolor;
	unsigned char uc1,uc2,uc3;

	if ((k<0)||(k>=126)) return(0);
	if ((l<0)||(l>127)) return(0);

	for (l1=0;l1<13;l1++)
	{
		for (l2=0;l2<12;l2++)
		{
			uc1=deb_chs_bmp[k][l][l1][l2][0];
			uc2=deb_chs_bmp[k][l][l1][l2][1];
			uc3=deb_chs_bmp[k][l][l1][l2][2];

			i1=255-uc1;
			i2=255-uc2;
			i3=255-uc3;

			bgcolor = SDL_MapRGB(screen->format, i1, i2, i3);//daipozhi modi

		    fill_rectangle(screen,
						   x+l2, y+13-l1,
					       1, 1,
						   bgcolor,0);
		}
	}

	return(0);
}

static int deb_echo_str4screenstring(int xx,int yy,char *str,int len)
{
	int				i,j,k,l;
	int				x,y;
	unsigned char			uc1,uc2;
	char				c1;

	x=xx;
	y=yy;

	i=len;
	j=0;

	while(j<i)
	{
		c1=str[j];

		if (c1>=0)
		{
			deb_echo_char4en(x,y,c1);

			x=x+6;
			j++;
			continue;
		}
		else 
		{
			uc1=str[j+0];
			uc2=str[j+1];

			if (uc2>=128)
			{

				k=uc1-129;
				l=uc2-128;

				if ((k>=0)&&(k<126))
				{
					if ((l>=0)&&(l<=127))
					{
						deb_echo_char4chs(x,y,k,l);
					}
				}

				x=x+12;
				j=j+2;
				continue;
			}
			else 
			{

				x=x+12;
				j=j+2;
				continue;

			}

		}

	}

	return(0);
}

static int deb_echo_str4screenstringblack(int xx,int yy,char *str,int len)
{
	int				i,j,k,l;
	int				x,y;
	unsigned char			uc1,uc2;
	char				c1;

	x=xx;
	y=yy;

	i=len;
	j=0;

	while(j<i)
	{
		c1=str[j];  

		if (c1>=0)
		{
			deb_echo_char4enblack(x,y,c1);

			x=x+6;
			j++;
			continue;
		}
		else 
		{
			uc1=str[j+0];
			uc2=str[j+1];

			if (uc2>=128)
			{

				k=uc1-129;
				l=uc2-128;

				if ((k>=0)&&(k<126))
				{
					if ((l>=0)&&(l<=127))
					{
						deb_echo_char4chsblack(x,y,k,l);
					}
				}

				x=x+12;
				j=j+2;
				continue;
			}
			else 
			{

				x=x+12;
				j=j+2;
				continue;

			}

		}

	}

	return(0);
}

static int deb_disp_bar(void)
{
	int   i,j,k;
	int   n1,n2,n3;
	int   bgcolor2;
/*
    screen_width =w;
    screen_height=h;
*/
	n1=screen_width/6+1;

	strcpy(deb_scrn_str," < ( )View > ( )< Edit > ( )<Think > ");

	i=(screen_width)/1;

	if (i< 180 ) i=180;
	if (i>=8000) i=8000-1;

	j=0;

	for (k=0;k<=i;k++)
	{
		deb_scrn_str2[k+0]='-';
		deb_scrn_str2[k+1]=0;
	}

	deb_echo_str4screenstring(0,screen_height-deb_ch_h*1-deb_ch_d,deb_scrn_str,n1);

	deb_echo_str4seekbar(screen_height-deb_ch_h*2-deb_ch_d,deb_scrn_str2);

	//SDL_UpdateRect(screen, 0, screen_height-deb_ch_h*2-deb_ch_d, screen_width, deb_ch_h*2+deb_ch_d);

	return(0);
}

static unsigned char m101_str[784];

static int deb_load_train_di(int page,int ind)
{
  int i,j;

  if ((page<0)||(page>=6000)) return(0);
  if ((ind<0)||(ind>=10)) return(0);

  for (i=0;i<28;i++)
    for (j=0;j<28;j++)
      deb_train_image[ind][i][j]=0;

  lseek(deb_fh_train_i,16+(page*10+ind)*28*28,0);

  read(deb_fh_train_i,m101_str,28*28);

  for (i=0;i<28;i++)
    for (j=0;j<28;j++)
      deb_train_image[ind][i][j]=m101_str[i*28+j];

  deb_train_label[ind]=' ';

  lseek(deb_fh_train_l,8+page*10+ind,0);

  read(deb_fh_train_l,m101_str,1);

  deb_train_label[ind]='0'+m101_str[0];

  return(0);
}

static int deb_load_train(void)
{
  int i;

  for (i=0;i<10;i++)
  {
    deb_load_train_di(deb_train_page,i);
  }

  return(0);
}

static int deb_load_test_di(int page,int ind)
{
  int i,j;

  if ((page<0)||(page>=500)) return(0);
  if ((ind<0)||(ind>=10)) return(0);

  for (i=0;i<28;i++)
    for (j=0;j<28;j++)
      deb_test_image[ind][i][j]=0;

  lseek(deb_fh_test_i,16+(page*10+ind)*28*28,0);

  read(deb_fh_test_i,m101_str,28*28);

  for (i=0;i<28;i++)
    for (j=0;j<28;j++)
      deb_test_image[ind][i][j]=m101_str[i*28+j];

  deb_test_label[ind]=' ';

  lseek(deb_fh_test_l,8+page*10+ind,0);

  read(deb_fh_test_l,m101_str,1);

  deb_test_label[ind]='0'+m101_str[0];

  return(0);
}

static int deb_load_test(void)
{
  int i;

  for (i=0;i<10;i++)
  {
    deb_load_test_di(deb_test_page,i);
  }

  return(0);
}

static int deb_disp_train_di(int x,int y,int ind)
{
	int l1,l2;
	int i1;
	int bgcolor;
        char str[300];

	for (l1=0;l1<28;l1++)
	{
		for (l2=0;l2<28;l2++)
		{
			i1=deb_train_image[ind][l1][l2];

			bgcolor = SDL_MapRGB(screen->format, i1, i1, i1);

			fill_rectangle(screen,
					   x+l2, y+l1,
					   1, 1,
					   bgcolor,0);
		}
	}

        str[0]=deb_train_label[ind];
        str[1]=0;
        strcat(str,"( )");

	deb_echo_str4screenstring(x,y+30,str,4);

	return(0);
}

static int deb_disp_train(void)
{
  int i,j,k;
  char str[300];

  if ((deb_train_page<0)||(deb_train_page>=6000)) return(0);

  i=21;
  j=1;

  for (k=0;k<10;k++) deb_disp_train_di(j+k*30,i,k);

  strcpy(str,"Train Image");
  deb_echo_str4screenstring(1,1,str,11);

  sprintf(str,"Page number:%4d",deb_train_page);
  deb_echo_str4screenstring(204,1,str,16);

  strcpy(str,"<Page Up  >");
  deb_echo_str4screenstring(320,1 ,str,11);

  strcpy(str,"<Page Down>");
  deb_echo_str4screenstring(320,21,str,11);

  return(0);
}

static int deb_disp_test_di(int x,int y,int ind)
{
	int l1,l2;
	int i1;
	int bgcolor;
        char str[300];

	for (l1=0;l1<28;l1++)
	{
		for (l2=0;l2<28;l2++)
		{
			i1=deb_test_image[ind][l1][l2];

			bgcolor = SDL_MapRGB(screen->format, i1, i1, i1);

			fill_rectangle(screen,
					   x+l2, y+l1,
					   1, 1,
					   bgcolor,0);
		}
	}

        str[0]=deb_test_label[ind];
        str[1]=0;
        strcat(str,"( )");

	deb_echo_str4screenstring(x,y+30,str,4);

	return(0);
}

static int deb_disp_test(void)
{
  int i,j,k;
  char str[300];

  if ((deb_test_page<0)||(deb_test_page>=500)) return(0);

  i=21+90;
  j=1;

  for (k=0;k<10;k++) deb_disp_test_di(j+k*30,i,k);

  strcpy(str,"Test Image");
  deb_echo_str4screenstring(1,1+90,str,10);

  sprintf(str,"Page number:%4d",deb_test_page);
  deb_echo_str4screenstring(204,1+90,str,16);

  strcpy(str,"<Page Up  >");
  deb_echo_str4screenstring(320,1 +90,str,11);

  strcpy(str,"<Page Down>");
  deb_echo_str4screenstring(320,21+90,str,11);

  return(0);
}

/* Called from the main */
int main(void/*int argc, char **argv*/)
{
    int  flags;
    char dummy_videodriver[] = "SDL_VIDEODRIVER=dummy";
    char alsa_bufsize[] = "SDL_AUDIO_ALSA_SET_BUFFER_SIZE=1";

    flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER;

    /* Try to work around an occasional ALSA buffer underflow issue when the
     * period size is NPOT due to ALSA resampling by forcing the buffer size. */
    if (!SDL_getenv("SDL_AUDIO_ALSA_SET_BUFFER_SIZE"))
        SDL_putenv(alsa_bufsize);

#if !defined(_WIN32) && !defined(__APPLE__)
    flags |= SDL_INIT_EVENTTHREAD; /* Not supported on Windows or Mac OS X */
#endif

    if (SDL_Init (flags)) {
        printf("Could not initialize SDL - %s\n", SDL_GetError());
        printf("(Did you set the DISPLAY variable?)\n");
        exit(1);
    }

    const SDL_VideoInfo *vi = SDL_GetVideoInfo();
    fs_screen_width = vi->current_w;
    fs_screen_height = vi->current_h;

    SDL_EventState(SDL_ACTIVEEVENT, SDL_IGNORE);
    SDL_EventState(SDL_SYSWMEVENT, SDL_IGNORE);
    SDL_EventState(SDL_USEREVENT, SDL_IGNORE);

    SDL_EnableKeyRepeat(SDL_DEFAULT_REPEAT_DELAY, SDL_DEFAULT_REPEAT_INTERVAL);


    video_open();


    deb_load_font();

    // open mnist database
    deb_fh_train_i=open("train-images.idx3-ubyte",O_RDONLY,S_IREAD);
    if (deb_fh_train_i<0)
    {
	printf("open file train-images.idx3-ubyte error\n");
	do_exit();
    }

    deb_fh_train_l=open("train-labels.idx1-ubyte",O_RDONLY,S_IREAD);
    if (deb_fh_train_l<0)
    {
	printf("open file train-labels.idx1-ubyte error\n");
	do_exit();
    }

    // set image index
    deb_train_page=0;
    deb_train_seri=0;

    // load image
    deb_load_train();

    // display image
    deb_disp_train();

    // open mnist database
    deb_fh_test_i=open("t10k-images.idx3-ubyte",O_RDONLY,S_IREAD);
    if (deb_fh_test_i<0)
    {
	printf("open file t10k-images.idx3-ubyte error\n");
	do_exit();
    }

    deb_fh_test_l=open("t10k-labels.idx1-ubyte",O_RDONLY,S_IREAD);
    if (deb_fh_test_l<0)
    {
	printf("open file t10k-labels.idx1-ubyte error\n");
	do_exit();
    }

    // set image index
    deb_test_page=0;
    deb_test_seri=0;

    // load image
    deb_load_test();

    // display image
    deb_disp_test();


    deb_disp_bar();

    SDL_UpdateRect(screen,0,0, screen_width,screen_height);//daipozhi modified

/*
    deb_get_dir_ini();  //daipozhi modified  

    deb_disp_dir(is);
    deb_disp_scrn(is);
*/
    event_loop();

    /* never returns */

    return 0;
}


